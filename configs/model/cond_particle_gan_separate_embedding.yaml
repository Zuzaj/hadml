_target_: hadml.models.cgan.cond_particle_gan.CondParticleGANModule
noise_dim: 128
cond_info_dim: 6
num_particle_ids: 40
num_output_particles: 2
num_particle_kinematics: 2
target_gumbel_temp: 0.1

## how often the optimizers will be used.
num_critics: 1
num_gen: 1

optimizer_generator:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 0.0003

optimizer_discriminator:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 0.0003

generator:
  _target_: hadml.models.components.mlp.MLPModule
  input_dim: ${eval:${model.noise_dim}+${model.cond_info_dim}}
  hidden_dims: [256, 256]
  output_dim: ${eval:${model.num_particle_ids}*${model.num_output_particles}+${model.num_particle_kinematics}}
  layer_norm: false
  dropout: 0.0

embedding_module:
  _target_: hadml.models.components.mlp.OneHotEmbeddingModule
  vocab_size: ${model.num_particle_ids}

discriminator:
  _target_: hadml.models.components.mlp.MLPModule
  input_dim: ${eval:${model.cond_info_dim}+${model.num_particle_kinematics}+2*${model.num_particle_ids}}
  hidden_dims: [128, 128]
  output_dim: 1
  layer_norm: false
  dropout: 0.0

generator_prescale:
  _target_: hadml.models.components.transform.NormModule
  val_max: [50., 50., 50., 50, 1.570796326794897 , 3.141592653589793]
  val_min: [0., -50., -50., -50, -1.570796326794897, 0]

generator_postscale:
  _target_: hadml.models.components.transform.InvsNormModule
  val_max: [1.570796326794897 , 3.141592653589793]
  val_min: [-1.570796326794897, 0]

discriminator_prescale:
  _target_: hadml.models.components.transform.NormModule
  val_max: [1.570796326794897 , 3.141592653589793]
  val_min: [-1.570796326794897, 0]

comparison_fn:
  _target_: hadml.metrics.compare_fn.CompareParticles
  xlabels: ["phi", "eta"]
  xranges: [[-1.6, 1.6], [-0.1, 3.2]]
  num_kinematics: ${model.num_particle_kinematics}
  num_particles: ${model.num_output_particles}
  num_particle_ids: ${model.num_particle_ids}
  outdir: ${paths.output_dir}/images

outdir:
  ${paths.output_dir}/data


